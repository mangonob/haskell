-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser_.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> program                           (0)
	program -> expr                                    (1)
	expr -> int                                        (2)
	expr -> string                                     (3)
	expr -> nil                                        (4)
	expr -> lvalue                                     (5)
	expr -> lvalue ':=' expr                           (6)
	expr -> '(' ')'                                    (7)
	expr -> '(' expr_seq ')'                           (8)
	expr -> '-' expr                                   (9)
	expr -> id '(' ')'                                 (10)
	expr -> id '(' params ')'                          (11)
	expr -> expr '+' expr                              (12)
	expr -> expr '-' expr                              (13)
	expr -> expr '*' expr                              (14)
	expr -> expr '/' expr                              (15)
	expr -> expr '=' expr                              (16)
	expr -> expr '<>' expr                             (17)
	expr -> expr '<' expr                              (18)
	expr -> expr '<=' expr                             (19)
	expr -> expr '>' expr                              (20)
	expr -> expr '>=' expr                             (21)
	expr -> expr '&' expr                              (22)
	expr -> expr '|' expr                              (23)
	expr -> id '{' '}'                                 (24)
	expr -> id '{' records '}'                         (25)
	expr -> id '[' expr ']' of expr                    (26)
	expr -> if expr then expr                          (27)
	expr -> if expr then expr else expr                (28)
	expr -> while expr do expr                         (29)
	expr -> for id ':=' expr to expr do expr           (30)
	expr -> break                                      (31)
	expr -> let decs in end                            (32)
	expr -> let decs in expr_seq end                   (33)
	lvalue -> id                                       (34)
	lvalue -> lvalue_                                  (35)
	lvalue_ -> id '.' id                               (36)
	lvalue_ -> id '[' expr ']'                         (37)
	lvalue_ -> lvalue_ '.' id                          (38)
	lvalue_ -> lvalue_ '[' expr ']'                    (39)
	expr_seq -> expr                                   (40)
	expr_seq -> expr_seq ';' expr                      (41)
	params -> expr                                     (42)
	params -> params ',' expr                          (43)
	records -> field                                   (44)
	records -> records ',' field                       (45)
	field -> id '=' expr                               (46)
	decs -> decs dec                                   (47)
	decs ->                                            (48)
	dec -> type id '=' ty                              (49)
	dec -> var id ':=' expr                            (50)
	dec -> var id ':' type_id ':=' expr                (51)
	dec -> function id '(' ty_fields ')' '=' expr      (52)
	dec -> function id '(' ty_fields ')' ':' type_id '=' expr   (53)
	ty -> type_id                                      (54)
	ty -> '{' ty_fields '}'                            (55)
	ty -> array of type_id                             (56)
	ty_fields -> ty_fields_                            (57)
	ty_fields ->                                       (58)
	ty_fields_ -> ty_field                             (59)
	ty_fields_ -> ty_fields_ ',' ty_field              (60)
	ty_field -> id ':' type_id                         (61)
	type_id -> id                                      (62)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	while          { While _ }
	for            { For _ }
	to             { To _ }
	break          { Break _ }
	let            { Let _ }
	in             { In _ }
	end            { End _ }
	function       { Function _ }
	var            { Var _ }
	type           { Type _ }
	array          { Array _ }
	if             { If _ }
	then           { Then _ }
	else           { Else _ }
	do             { Do _ }
	of             { Of _ }
	nil            { Nil _ }
	','            { Comma _ }
	':'            { Colon _ }
	';'            { Semicolon _ }
	'('            { LeftParen _ }
	')'            { RightParen _ }
	'['            { LeftBracket _ }
	']'            { RightBracket _ }
	'{'            { LeftBrace _ }
	'}'            { RightBrace _ }
	'.'            { Dot _ }
	'+'            { Plus _ }
	'-'            { Minus _ }
	'*'            { Times _ }
	'/'            { Divide _ }
	'='            { Eq _ }
	'<>'           { NotEq _ }
	'<'            { Lt _ }
	'<='           { Le _ }
	'>'            { Gt _ }
	'>='           { Ge _ }
	'&'            { And _ }
	'|'            { Or _ }
	':='           { Assign _ }
	string         { String _ _ }
	int            { Int _ _ }
	id             { ID _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	program         rule  1
	expr            rules 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33
	lvalue          rules 34, 35
	lvalue_         rules 36, 37, 38, 39
	expr_seq        rules 40, 41
	params          rules 42, 43
	records         rules 44, 45
	field           rule  46
	decs            rules 47, 48
	dec             rules 49, 50, 51, 52, 53
	ty              rules 54, 55, 56
	ty_fields       rules 57, 58
	ty_fields_      rules 59, 60
	ty_field        rule  61
	type_id         rule  62

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . program                          (rule 0)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	program        goto state 16
	expr           goto state 2
	lvalue         goto state 3
	lvalue_        goto state 4

State 1

	program -> . expr                                   (rule 1)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 2
	lvalue         goto state 3
	lvalue_        goto state 4

State 2

	program -> expr .                                   (rule 1)
	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43
	%eof           reduce using rule 1


State 3

	expr -> lvalue .                                    (rule 5)
	expr -> lvalue . ':=' expr                          (rule 6)

	to             reduce using rule 5
	in             reduce using rule 5
	end            reduce using rule 5
	function       reduce using rule 5
	var            reduce using rule 5
	type           reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	do             reduce using rule 5
	','            reduce using rule 5
	';'            reduce using rule 5
	')'            reduce using rule 5
	']'            reduce using rule 5
	'}'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	'='            reduce using rule 5
	'<>'           reduce using rule 5
	'<'            reduce using rule 5
	'<='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'&'            reduce using rule 5
	'|'            reduce using rule 5
	':='           shift, and enter state 31
	%eof           reduce using rule 5


State 4

	lvalue -> lvalue_ .                                 (rule 35)
	lvalue_ -> lvalue_ . '.' id                         (rule 38)
	lvalue_ -> lvalue_ . '[' expr ']'                   (rule 39)

	to             reduce using rule 35
	in             reduce using rule 35
	end            reduce using rule 35
	function       reduce using rule 35
	var            reduce using rule 35
	type           reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	do             reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	')'            reduce using rule 35
	'['            shift, and enter state 29
	']'            reduce using rule 35
	'}'            reduce using rule 35
	'.'            shift, and enter state 30
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'='            reduce using rule 35
	'<>'           reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'&'            reduce using rule 35
	'|'            reduce using rule 35
	':='           reduce using rule 35
	%eof           reduce using rule 35


State 5

	expr -> while . expr do expr                        (rule 29)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 28
	lvalue         goto state 3
	lvalue_        goto state 4

State 6

	expr -> for . id ':=' expr to expr do expr          (rule 30)

	id             shift, and enter state 27


State 7

	expr -> break .                                     (rule 31)

	to             reduce using rule 31
	in             reduce using rule 31
	end            reduce using rule 31
	function       reduce using rule 31
	var            reduce using rule 31
	type           reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	do             reduce using rule 31
	','            reduce using rule 31
	';'            reduce using rule 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	'}'            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'='            reduce using rule 31
	'<>'           reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	'&'            reduce using rule 31
	'|'            reduce using rule 31
	%eof           reduce using rule 31


State 8

	expr -> let . decs in end                           (rule 32)
	expr -> let . decs in expr_seq end                  (rule 33)

	in             reduce using rule 48
	function       reduce using rule 48
	var            reduce using rule 48
	type           reduce using rule 48

	decs           goto state 26

State 9

	expr -> if . expr then expr                         (rule 27)
	expr -> if . expr then expr else expr               (rule 28)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 25
	lvalue         goto state 3
	lvalue_        goto state 4

State 10

	expr -> nil .                                       (rule 4)

	to             reduce using rule 4
	in             reduce using rule 4
	end            reduce using rule 4
	function       reduce using rule 4
	var            reduce using rule 4
	type           reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	do             reduce using rule 4
	','            reduce using rule 4
	';'            reduce using rule 4
	')'            reduce using rule 4
	']'            reduce using rule 4
	'}'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'='            reduce using rule 4
	'<>'           reduce using rule 4
	'<'            reduce using rule 4
	'<='           reduce using rule 4
	'>'            reduce using rule 4
	'>='           reduce using rule 4
	'&'            reduce using rule 4
	'|'            reduce using rule 4
	%eof           reduce using rule 4


State 11

	expr -> '(' . ')'                                   (rule 7)
	expr -> '(' . expr_seq ')'                          (rule 8)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	')'            shift, and enter state 24
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 22
	lvalue         goto state 3
	lvalue_        goto state 4
	expr_seq       goto state 23

State 12

	expr -> '-' . expr                                  (rule 9)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 21
	lvalue         goto state 3
	lvalue_        goto state 4

State 13

	expr -> string .                                    (rule 3)

	to             reduce using rule 3
	in             reduce using rule 3
	end            reduce using rule 3
	function       reduce using rule 3
	var            reduce using rule 3
	type           reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	do             reduce using rule 3
	','            reduce using rule 3
	';'            reduce using rule 3
	')'            reduce using rule 3
	']'            reduce using rule 3
	'}'            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'='            reduce using rule 3
	'<>'           reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'&'            reduce using rule 3
	'|'            reduce using rule 3
	%eof           reduce using rule 3


State 14

	expr -> int .                                       (rule 2)

	to             reduce using rule 2
	in             reduce using rule 2
	end            reduce using rule 2
	function       reduce using rule 2
	var            reduce using rule 2
	type           reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	do             reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	')'            reduce using rule 2
	']'            reduce using rule 2
	'}'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	'/'            reduce using rule 2
	'='            reduce using rule 2
	'<>'           reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'&'            reduce using rule 2
	'|'            reduce using rule 2
	%eof           reduce using rule 2


State 15

	expr -> id . '(' ')'                                (rule 10)
	expr -> id . '(' params ')'                         (rule 11)
	expr -> id . '{' '}'                                (rule 24)
	expr -> id . '{' records '}'                        (rule 25)
	expr -> id . '[' expr ']' of expr                   (rule 26)
	lvalue -> id .                                      (rule 34)
	lvalue_ -> id . '.' id                              (rule 36)
	lvalue_ -> id . '[' expr ']'                        (rule 37)

	to             reduce using rule 34
	in             reduce using rule 34
	end            reduce using rule 34
	function       reduce using rule 34
	var            reduce using rule 34
	type           reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	do             reduce using rule 34
	','            reduce using rule 34
	';'            reduce using rule 34
	'('            shift, and enter state 17
	')'            reduce using rule 34
	'['            shift, and enter state 18
	']'            reduce using rule 34
	'{'            shift, and enter state 19
	'}'            reduce using rule 34
	'.'            shift, and enter state 20
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'='            reduce using rule 34
	'<>'           reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'&'            reduce using rule 34
	'|'            reduce using rule 34
	':='           reduce using rule 34
	%eof           reduce using rule 34


State 16

	%start_parser -> program .                          (rule 0)

	%eof           accept


State 17

	expr -> id '(' . ')'                                (rule 10)
	expr -> id '(' . params ')'                         (rule 11)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	')'            shift, and enter state 77
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 75
	lvalue         goto state 3
	lvalue_        goto state 4
	params         goto state 76

State 18

	expr -> id '[' . expr ']' of expr                   (rule 26)
	lvalue_ -> id '[' . expr ']'                        (rule 37)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 74
	lvalue         goto state 3
	lvalue_        goto state 4

State 19

	expr -> id '{' . '}'                                (rule 24)
	expr -> id '{' . records '}'                        (rule 25)

	'}'            shift, and enter state 72
	id             shift, and enter state 73

	records        goto state 70
	field          goto state 71

State 20

	lvalue_ -> id '.' . id                              (rule 36)

	id             shift, and enter state 69


State 21

	expr -> '-' expr .                                  (rule 9)
	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 9
	in             reduce using rule 9
	end            reduce using rule 9
	function       reduce using rule 9
	var            reduce using rule 9
	type           reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	do             reduce using rule 9
	','            reduce using rule 9
	';'            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	'}'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'='            reduce using rule 9
	'<>'           reduce using rule 9
	'<'            reduce using rule 9
	'<='           reduce using rule 9
	'>'            reduce using rule 9
	'>='           reduce using rule 9
	'&'            reduce using rule 9
	'|'            reduce using rule 9
	%eof           reduce using rule 9


State 22

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr_seq -> expr .                                  (rule 40)

	end            reduce using rule 40
	';'            reduce using rule 40
	')'            reduce using rule 40
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 23

	expr -> '(' expr_seq . ')'                          (rule 8)
	expr_seq -> expr_seq . ';' expr                     (rule 41)

	';'            shift, and enter state 67
	')'            shift, and enter state 68


State 24

	expr -> '(' ')' .                                   (rule 7)

	to             reduce using rule 7
	in             reduce using rule 7
	end            reduce using rule 7
	function       reduce using rule 7
	var            reduce using rule 7
	type           reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	do             reduce using rule 7
	','            reduce using rule 7
	';'            reduce using rule 7
	')'            reduce using rule 7
	']'            reduce using rule 7
	'}'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'='            reduce using rule 7
	'<>'           reduce using rule 7
	'<'            reduce using rule 7
	'<='           reduce using rule 7
	'>'            reduce using rule 7
	'>='           reduce using rule 7
	'&'            reduce using rule 7
	'|'            reduce using rule 7
	%eof           reduce using rule 7


State 25

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> if expr . then expr                         (rule 27)
	expr -> if expr . then expr else expr               (rule 28)

	then           shift, and enter state 66
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 26

	expr -> let decs . in end                           (rule 32)
	expr -> let decs . in expr_seq end                  (rule 33)
	decs -> decs . dec                                  (rule 47)

	in             shift, and enter state 62
	function       shift, and enter state 63
	var            shift, and enter state 64
	type           shift, and enter state 65

	dec            goto state 61

State 27

	expr -> for id . ':=' expr to expr do expr          (rule 30)

	':='           shift, and enter state 60


State 28

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> while expr . do expr                        (rule 29)

	do             shift, and enter state 59
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 29

	lvalue_ -> lvalue_ '[' . expr ']'                   (rule 39)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 58
	lvalue         goto state 3
	lvalue_        goto state 4

State 30

	lvalue_ -> lvalue_ '.' . id                         (rule 38)

	id             shift, and enter state 57


State 31

	expr -> lvalue ':=' . expr                          (rule 6)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 56
	lvalue         goto state 3
	lvalue_        goto state 4

State 32

	expr -> expr '+' . expr                             (rule 12)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 55
	lvalue         goto state 3
	lvalue_        goto state 4

State 33

	expr -> expr '-' . expr                             (rule 13)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 54
	lvalue         goto state 3
	lvalue_        goto state 4

State 34

	expr -> expr '*' . expr                             (rule 14)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 53
	lvalue         goto state 3
	lvalue_        goto state 4

State 35

	expr -> expr '/' . expr                             (rule 15)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 52
	lvalue         goto state 3
	lvalue_        goto state 4

State 36

	expr -> expr '=' . expr                             (rule 16)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 51
	lvalue         goto state 3
	lvalue_        goto state 4

State 37

	expr -> expr '<>' . expr                            (rule 17)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 50
	lvalue         goto state 3
	lvalue_        goto state 4

State 38

	expr -> expr '<' . expr                             (rule 18)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 49
	lvalue         goto state 3
	lvalue_        goto state 4

State 39

	expr -> expr '<=' . expr                            (rule 19)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 48
	lvalue         goto state 3
	lvalue_        goto state 4

State 40

	expr -> expr '>' . expr                             (rule 20)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 47
	lvalue         goto state 3
	lvalue_        goto state 4

State 41

	expr -> expr '>=' . expr                            (rule 21)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 46
	lvalue         goto state 3
	lvalue_        goto state 4

State 42

	expr -> expr '&' . expr                             (rule 22)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 45
	lvalue         goto state 3
	lvalue_        goto state 4

State 43

	expr -> expr '|' . expr                             (rule 23)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 44
	lvalue         goto state 3
	lvalue_        goto state 4

State 44

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> expr '|' expr .                             (rule 23)

	to             reduce using rule 23
	in             reduce using rule 23
	end            reduce using rule 23
	function       reduce using rule 23
	var            reduce using rule 23
	type           reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	do             reduce using rule 23
	','            reduce using rule 23
	';'            reduce using rule 23
	')'            reduce using rule 23
	']'            reduce using rule 23
	'}'            reduce using rule 23
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            reduce using rule 23
	'|'            reduce using rule 23
	%eof           reduce using rule 23


State 45

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr '&' expr .                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 22
	in             reduce using rule 22
	end            reduce using rule 22
	function       reduce using rule 22
	var            reduce using rule 22
	type           reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	do             reduce using rule 22
	','            reduce using rule 22
	';'            reduce using rule 22
	')'            reduce using rule 22
	']'            reduce using rule 22
	'}'            reduce using rule 22
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            reduce using rule 22
	'|'            reduce using rule 22
	%eof           reduce using rule 22


State 46

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr '>=' expr .                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 21
	in             reduce using rule 21
	end            reduce using rule 21
	function       reduce using rule 21
	var            reduce using rule 21
	type           reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	do             reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21
	')'            reduce using rule 21
	']'            reduce using rule 21
	'}'            reduce using rule 21
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 21
	'|'            reduce using rule 21
	%eof           reduce using rule 21


State 47

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr '>' expr .                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 20
	in             reduce using rule 20
	end            reduce using rule 20
	function       reduce using rule 20
	var            reduce using rule 20
	type           reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	do             reduce using rule 20
	','            reduce using rule 20
	';'            reduce using rule 20
	')'            reduce using rule 20
	']'            reduce using rule 20
	'}'            reduce using rule 20
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 20
	'|'            reduce using rule 20
	%eof           reduce using rule 20


State 48

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr '<=' expr .                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 19
	in             reduce using rule 19
	end            reduce using rule 19
	function       reduce using rule 19
	var            reduce using rule 19
	type           reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	do             reduce using rule 19
	','            reduce using rule 19
	';'            reduce using rule 19
	')'            reduce using rule 19
	']'            reduce using rule 19
	'}'            reduce using rule 19
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 19
	'|'            reduce using rule 19
	%eof           reduce using rule 19


State 49

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr '<' expr .                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 18
	in             reduce using rule 18
	end            reduce using rule 18
	function       reduce using rule 18
	var            reduce using rule 18
	type           reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	do             reduce using rule 18
	','            reduce using rule 18
	';'            reduce using rule 18
	')'            reduce using rule 18
	']'            reduce using rule 18
	'}'            reduce using rule 18
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	%eof           reduce using rule 18


State 50

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr '<>' expr .                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 17
	in             reduce using rule 17
	end            reduce using rule 17
	function       reduce using rule 17
	var            reduce using rule 17
	type           reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	do             reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	'}'            reduce using rule 17
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 17
	'|'            reduce using rule 17
	%eof           reduce using rule 17


State 51

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr '=' expr .                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 16
	in             reduce using rule 16
	end            reduce using rule 16
	function       reduce using rule 16
	var            reduce using rule 16
	type           reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	do             reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	'}'            reduce using rule 16
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'&'            reduce using rule 16
	'|'            reduce using rule 16
	%eof           reduce using rule 16


State 52

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr '/' expr .                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 15
	in             reduce using rule 15
	end            reduce using rule 15
	function       reduce using rule 15
	var            reduce using rule 15
	type           reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	do             reduce using rule 15
	','            reduce using rule 15
	';'            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	'}'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'='            reduce using rule 15
	'<>'           reduce using rule 15
	'<'            reduce using rule 15
	'<='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	'&'            reduce using rule 15
	'|'            reduce using rule 15
	%eof           reduce using rule 15


State 53

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr '*' expr .                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 14
	in             reduce using rule 14
	end            reduce using rule 14
	function       reduce using rule 14
	var            reduce using rule 14
	type           reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	do             reduce using rule 14
	','            reduce using rule 14
	';'            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	'}'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'='            reduce using rule 14
	'<>'           reduce using rule 14
	'<'            reduce using rule 14
	'<='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'&'            reduce using rule 14
	'|'            reduce using rule 14
	%eof           reduce using rule 14


State 54

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr '-' expr .                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 13
	in             reduce using rule 13
	end            reduce using rule 13
	function       reduce using rule 13
	var            reduce using rule 13
	type           reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	do             reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	'}'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            reduce using rule 13
	'<>'           reduce using rule 13
	'<'            reduce using rule 13
	'<='           reduce using rule 13
	'>'            reduce using rule 13
	'>='           reduce using rule 13
	'&'            reduce using rule 13
	'|'            reduce using rule 13
	%eof           reduce using rule 13


State 55

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr '+' expr .                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 12
	in             reduce using rule 12
	end            reduce using rule 12
	function       reduce using rule 12
	var            reduce using rule 12
	type           reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	do             reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	'}'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            reduce using rule 12
	'<>'           reduce using rule 12
	'<'            reduce using rule 12
	'<='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'&'            reduce using rule 12
	'|'            reduce using rule 12
	%eof           reduce using rule 12


State 56

	expr -> lvalue ':=' expr .                          (rule 6)
	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             reduce using rule 6
	in             reduce using rule 6
	end            reduce using rule 6
	function       reduce using rule 6
	var            reduce using rule 6
	type           reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	do             reduce using rule 6
	','            reduce using rule 6
	';'            reduce using rule 6
	')'            reduce using rule 6
	']'            reduce using rule 6
	'}'            reduce using rule 6
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43
	%eof           reduce using rule 6


State 57

	lvalue_ -> lvalue_ '.' id .                         (rule 38)

	to             reduce using rule 38
	in             reduce using rule 38
	end            reduce using rule 38
	function       reduce using rule 38
	var            reduce using rule 38
	type           reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	do             reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	'}'            reduce using rule 38
	'.'            reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'&'            reduce using rule 38
	'|'            reduce using rule 38
	':='           reduce using rule 38
	%eof           reduce using rule 38


State 58

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	lvalue_ -> lvalue_ '[' expr . ']'                   (rule 39)

	']'            shift, and enter state 93
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 59

	expr -> while expr do . expr                        (rule 29)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 92
	lvalue         goto state 3
	lvalue_        goto state 4

State 60

	expr -> for id ':=' . expr to expr do expr          (rule 30)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 91
	lvalue         goto state 3
	lvalue_        goto state 4

State 61

	decs -> decs dec .                                  (rule 47)

	in             reduce using rule 47
	function       reduce using rule 47
	var            reduce using rule 47
	type           reduce using rule 47


State 62

	expr -> let decs in . end                           (rule 32)
	expr -> let decs in . expr_seq end                  (rule 33)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	end            shift, and enter state 90
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 22
	lvalue         goto state 3
	lvalue_        goto state 4
	expr_seq       goto state 89

State 63

	dec -> function . id '(' ty_fields ')' '=' expr     (rule 52)
	dec -> function . id '(' ty_fields ')' ':' type_id '=' expr    (rule 53)

	id             shift, and enter state 88


State 64

	dec -> var . id ':=' expr                           (rule 50)
	dec -> var . id ':' type_id ':=' expr               (rule 51)

	id             shift, and enter state 87


State 65

	dec -> type . id '=' ty                             (rule 49)

	id             shift, and enter state 86


State 66

	expr -> if expr then . expr                         (rule 27)
	expr -> if expr then . expr else expr               (rule 28)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 85
	lvalue         goto state 3
	lvalue_        goto state 4

State 67

	expr_seq -> expr_seq ';' . expr                     (rule 41)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 84
	lvalue         goto state 3
	lvalue_        goto state 4

State 68

	expr -> '(' expr_seq ')' .                          (rule 8)

	to             reduce using rule 8
	in             reduce using rule 8
	end            reduce using rule 8
	function       reduce using rule 8
	var            reduce using rule 8
	type           reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	do             reduce using rule 8
	','            reduce using rule 8
	';'            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	'}'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'='            reduce using rule 8
	'<>'           reduce using rule 8
	'<'            reduce using rule 8
	'<='           reduce using rule 8
	'>'            reduce using rule 8
	'>='           reduce using rule 8
	'&'            reduce using rule 8
	'|'            reduce using rule 8
	%eof           reduce using rule 8


State 69

	lvalue_ -> id '.' id .                              (rule 36)

	to             reduce using rule 36
	in             reduce using rule 36
	end            reduce using rule 36
	function       reduce using rule 36
	var            reduce using rule 36
	type           reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	do             reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	')'            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	'}'            reduce using rule 36
	'.'            reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'='            reduce using rule 36
	'<>'           reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'&'            reduce using rule 36
	'|'            reduce using rule 36
	':='           reduce using rule 36
	%eof           reduce using rule 36


State 70

	expr -> id '{' records . '}'                        (rule 25)
	records -> records . ',' field                      (rule 45)

	','            shift, and enter state 82
	'}'            shift, and enter state 83


State 71

	records -> field .                                  (rule 44)

	','            reduce using rule 44
	'}'            reduce using rule 44


State 72

	expr -> id '{' '}' .                                (rule 24)

	to             reduce using rule 24
	in             reduce using rule 24
	end            reduce using rule 24
	function       reduce using rule 24
	var            reduce using rule 24
	type           reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	do             reduce using rule 24
	','            reduce using rule 24
	';'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	'}'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'='            reduce using rule 24
	'<>'           reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	'&'            reduce using rule 24
	'|'            reduce using rule 24
	%eof           reduce using rule 24


State 73

	field -> id . '=' expr                              (rule 46)

	'='            shift, and enter state 81


State 74

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> id '[' expr . ']' of expr                   (rule 26)
	lvalue_ -> id '[' expr . ']'                        (rule 37)

	']'            shift, and enter state 80
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 75

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	params -> expr .                                    (rule 42)

	','            reduce using rule 42
	')'            reduce using rule 42
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 76

	expr -> id '(' params . ')'                         (rule 11)
	params -> params . ',' expr                         (rule 43)

	','            shift, and enter state 78
	')'            shift, and enter state 79


State 77

	expr -> id '(' ')' .                                (rule 10)

	to             reduce using rule 10
	in             reduce using rule 10
	end            reduce using rule 10
	function       reduce using rule 10
	var            reduce using rule 10
	type           reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	do             reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	'}'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'='            reduce using rule 10
	'<>'           reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	'&'            reduce using rule 10
	'|'            reduce using rule 10
	%eof           reduce using rule 10


State 78

	params -> params ',' . expr                         (rule 43)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 104
	lvalue         goto state 3
	lvalue_        goto state 4

State 79

	expr -> id '(' params ')' .                         (rule 11)

	to             reduce using rule 11
	in             reduce using rule 11
	end            reduce using rule 11
	function       reduce using rule 11
	var            reduce using rule 11
	type           reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	do             reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	'}'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'='            reduce using rule 11
	'<>'           reduce using rule 11
	'<'            reduce using rule 11
	'<='           reduce using rule 11
	'>'            reduce using rule 11
	'>='           reduce using rule 11
	'&'            reduce using rule 11
	'|'            reduce using rule 11
	%eof           reduce using rule 11


State 80

	expr -> id '[' expr ']' . of expr                   (rule 26)
	lvalue_ -> id '[' expr ']' .                        (rule 37)

	to             reduce using rule 37
	in             reduce using rule 37
	end            reduce using rule 37
	function       reduce using rule 37
	var            reduce using rule 37
	type           reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	do             reduce using rule 37
	of             shift, and enter state 103
	','            reduce using rule 37
	';'            reduce using rule 37
	')'            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	'}'            reduce using rule 37
	'.'            reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	'='            reduce using rule 37
	'<>'           reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'&'            reduce using rule 37
	'|'            reduce using rule 37
	':='           reduce using rule 37
	%eof           reduce using rule 37


State 81

	field -> id '=' . expr                              (rule 46)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 102
	lvalue         goto state 3
	lvalue_        goto state 4

State 82

	records -> records ',' . field                      (rule 45)

	id             shift, and enter state 73

	field          goto state 101

State 83

	expr -> id '{' records '}' .                        (rule 25)

	to             reduce using rule 25
	in             reduce using rule 25
	end            reduce using rule 25
	function       reduce using rule 25
	var            reduce using rule 25
	type           reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	do             reduce using rule 25
	','            reduce using rule 25
	';'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	'}'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'='            reduce using rule 25
	'<>'           reduce using rule 25
	'<'            reduce using rule 25
	'<='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	'&'            reduce using rule 25
	'|'            reduce using rule 25
	%eof           reduce using rule 25


State 84

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr_seq -> expr_seq ';' expr .                     (rule 41)

	end            reduce using rule 41
	';'            reduce using rule 41
	')'            reduce using rule 41
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 85

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> if expr then expr .                         (rule 27)
	expr -> if expr then expr . else expr               (rule 28)

	to             reduce using rule 27
	in             reduce using rule 27
	end            reduce using rule 27
	function       reduce using rule 27
	var            reduce using rule 27
	type           reduce using rule 27
	then           reduce using rule 27
	else           shift, and enter state 100
	do             reduce using rule 27
	','            reduce using rule 27
	';'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	'}'            reduce using rule 27
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43
	%eof           reduce using rule 27


State 86

	dec -> type id . '=' ty                             (rule 49)

	'='            shift, and enter state 99


State 87

	dec -> var id . ':=' expr                           (rule 50)
	dec -> var id . ':' type_id ':=' expr               (rule 51)

	':'            shift, and enter state 97
	':='           shift, and enter state 98


State 88

	dec -> function id . '(' ty_fields ')' '=' expr     (rule 52)
	dec -> function id . '(' ty_fields ')' ':' type_id '=' expr    (rule 53)

	'('            shift, and enter state 96


State 89

	expr -> let decs in expr_seq . end                  (rule 33)
	expr_seq -> expr_seq . ';' expr                     (rule 41)

	end            shift, and enter state 95
	';'            shift, and enter state 67


State 90

	expr -> let decs in end .                           (rule 32)

	to             reduce using rule 32
	in             reduce using rule 32
	end            reduce using rule 32
	function       reduce using rule 32
	var            reduce using rule 32
	type           reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	do             reduce using rule 32
	','            reduce using rule 32
	';'            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	'}'            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'='            reduce using rule 32
	'<>'           reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'&'            reduce using rule 32
	'|'            reduce using rule 32
	%eof           reduce using rule 32


State 91

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> for id ':=' expr . to expr do expr          (rule 30)

	to             shift, and enter state 94
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 92

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> while expr do expr .                        (rule 29)

	to             reduce using rule 29
	in             reduce using rule 29
	end            reduce using rule 29
	function       reduce using rule 29
	var            reduce using rule 29
	type           reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	do             reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	')'            reduce using rule 29
	']'            reduce using rule 29
	'}'            reduce using rule 29
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43
	%eof           reduce using rule 29


State 93

	lvalue_ -> lvalue_ '[' expr ']' .                   (rule 39)

	to             reduce using rule 39
	in             reduce using rule 39
	end            reduce using rule 39
	function       reduce using rule 39
	var            reduce using rule 39
	type           reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	do             reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	')'            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	'}'            reduce using rule 39
	'.'            reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	'='            reduce using rule 39
	'<>'           reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'&'            reduce using rule 39
	'|'            reduce using rule 39
	':='           reduce using rule 39
	%eof           reduce using rule 39


State 94

	expr -> for id ':=' expr to . expr do expr          (rule 30)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 118
	lvalue         goto state 3
	lvalue_        goto state 4

State 95

	expr -> let decs in expr_seq end .                  (rule 33)

	to             reduce using rule 33
	in             reduce using rule 33
	end            reduce using rule 33
	function       reduce using rule 33
	var            reduce using rule 33
	type           reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	do             reduce using rule 33
	','            reduce using rule 33
	';'            reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	'}'            reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'='            reduce using rule 33
	'<>'           reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'&'            reduce using rule 33
	'|'            reduce using rule 33
	%eof           reduce using rule 33


State 96

	dec -> function id '(' . ty_fields ')' '=' expr     (rule 52)
	dec -> function id '(' . ty_fields ')' ':' type_id '=' expr    (rule 53)

	')'            reduce using rule 58
	id             shift, and enter state 117

	ty_fields      goto state 114
	ty_fields_     goto state 115
	ty_field       goto state 116

State 97

	dec -> var id ':' . type_id ':=' expr               (rule 51)

	id             shift, and enter state 111

	type_id        goto state 113

State 98

	dec -> var id ':=' . expr                           (rule 50)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 112
	lvalue         goto state 3
	lvalue_        goto state 4

State 99

	dec -> type id '=' . ty                             (rule 49)

	array          shift, and enter state 109
	'{'            shift, and enter state 110
	id             shift, and enter state 111

	ty             goto state 107
	type_id        goto state 108

State 100

	expr -> if expr then expr else . expr               (rule 28)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 106
	lvalue         goto state 3
	lvalue_        goto state 4

State 101

	records -> records ',' field .                      (rule 45)

	','            reduce using rule 45
	'}'            reduce using rule 45


State 102

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	field -> id '=' expr .                              (rule 46)

	','            reduce using rule 46
	'}'            reduce using rule 46
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 103

	expr -> id '[' expr ']' of . expr                   (rule 26)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 105
	lvalue         goto state 3
	lvalue_        goto state 4

State 104

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	params -> params ',' expr .                         (rule 43)

	','            reduce using rule 43
	')'            reduce using rule 43
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 105

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> id '[' expr ']' of expr .                   (rule 26)

	to             reduce using rule 26
	in             reduce using rule 26
	end            reduce using rule 26
	function       reduce using rule 26
	var            reduce using rule 26
	type           reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	do             reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	'}'            reduce using rule 26
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43
	%eof           reduce using rule 26


State 106

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> if expr then expr else expr .               (rule 28)

	to             reduce using rule 28
	in             reduce using rule 28
	end            reduce using rule 28
	function       reduce using rule 28
	var            reduce using rule 28
	type           reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	do             reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	'}'            reduce using rule 28
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43
	%eof           reduce using rule 28


State 107

	dec -> type id '=' ty .                             (rule 49)

	in             reduce using rule 49
	function       reduce using rule 49
	var            reduce using rule 49
	type           reduce using rule 49


State 108

	ty -> type_id .                                     (rule 54)

	in             reduce using rule 54
	function       reduce using rule 54
	var            reduce using rule 54
	type           reduce using rule 54


State 109

	ty -> array . of type_id                            (rule 56)

	of             shift, and enter state 125


State 110

	ty -> '{' . ty_fields '}'                           (rule 55)

	'}'            reduce using rule 58
	id             shift, and enter state 117

	ty_fields      goto state 124
	ty_fields_     goto state 115
	ty_field       goto state 116

State 111

	type_id -> id .                                     (rule 62)

	in             reduce using rule 62
	function       reduce using rule 62
	var            reduce using rule 62
	type           reduce using rule 62
	','            reduce using rule 62
	')'            reduce using rule 62
	'}'            reduce using rule 62
	'='            reduce using rule 62
	':='           reduce using rule 62


State 112

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	dec -> var id ':=' expr .                           (rule 50)

	in             reduce using rule 50
	function       reduce using rule 50
	var            reduce using rule 50
	type           reduce using rule 50
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 113

	dec -> var id ':' type_id . ':=' expr               (rule 51)

	':='           shift, and enter state 123


State 114

	dec -> function id '(' ty_fields . ')' '=' expr     (rule 52)
	dec -> function id '(' ty_fields . ')' ':' type_id '=' expr    (rule 53)

	')'            shift, and enter state 122


State 115

	ty_fields -> ty_fields_ .                           (rule 57)
	ty_fields_ -> ty_fields_ . ',' ty_field             (rule 60)

	','            shift, and enter state 121
	')'            reduce using rule 57
	'}'            reduce using rule 57


State 116

	ty_fields_ -> ty_field .                            (rule 59)

	','            reduce using rule 59
	')'            reduce using rule 59
	'}'            reduce using rule 59


State 117

	ty_field -> id . ':' type_id                        (rule 61)

	':'            shift, and enter state 120


State 118

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> for id ':=' expr to expr . do expr          (rule 30)

	do             shift, and enter state 119
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 119

	expr -> for id ':=' expr to expr do . expr          (rule 30)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 133
	lvalue         goto state 3
	lvalue_        goto state 4

State 120

	ty_field -> id ':' . type_id                        (rule 61)

	id             shift, and enter state 111

	type_id        goto state 132

State 121

	ty_fields_ -> ty_fields_ ',' . ty_field             (rule 60)

	id             shift, and enter state 117

	ty_field       goto state 131

State 122

	dec -> function id '(' ty_fields ')' . '=' expr     (rule 52)
	dec -> function id '(' ty_fields ')' . ':' type_id '=' expr    (rule 53)

	':'            shift, and enter state 129
	'='            shift, and enter state 130


State 123

	dec -> var id ':' type_id ':=' . expr               (rule 51)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 128
	lvalue         goto state 3
	lvalue_        goto state 4

State 124

	ty -> '{' ty_fields . '}'                           (rule 55)

	'}'            shift, and enter state 127


State 125

	ty -> array of . type_id                            (rule 56)

	id             shift, and enter state 111

	type_id        goto state 126

State 126

	ty -> array of type_id .                            (rule 56)

	in             reduce using rule 56
	function       reduce using rule 56
	var            reduce using rule 56
	type           reduce using rule 56


State 127

	ty -> '{' ty_fields '}' .                           (rule 55)

	in             reduce using rule 55
	function       reduce using rule 55
	var            reduce using rule 55
	type           reduce using rule 55


State 128

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	dec -> var id ':' type_id ':=' expr .               (rule 51)

	in             reduce using rule 51
	function       reduce using rule 51
	var            reduce using rule 51
	type           reduce using rule 51
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 129

	dec -> function id '(' ty_fields ')' ':' . type_id '=' expr    (rule 53)

	id             shift, and enter state 111

	type_id        goto state 135

State 130

	dec -> function id '(' ty_fields ')' '=' . expr     (rule 52)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 134
	lvalue         goto state 3
	lvalue_        goto state 4

State 131

	ty_fields_ -> ty_fields_ ',' ty_field .             (rule 60)

	','            reduce using rule 60
	')'            reduce using rule 60
	'}'            reduce using rule 60


State 132

	ty_field -> id ':' type_id .                        (rule 61)

	','            reduce using rule 61
	')'            reduce using rule 61
	'}'            reduce using rule 61


State 133

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> for id ':=' expr to expr do expr .          (rule 30)

	to             reduce using rule 30
	in             reduce using rule 30
	end            reduce using rule 30
	function       reduce using rule 30
	var            reduce using rule 30
	type           reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	do             reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30
	')'            reduce using rule 30
	']'            reduce using rule 30
	'}'            reduce using rule 30
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43
	%eof           reduce using rule 30


State 134

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	dec -> function id '(' ty_fields ')' '=' expr .     (rule 52)

	in             reduce using rule 52
	function       reduce using rule 52
	var            reduce using rule 52
	type           reduce using rule 52
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


State 135

	dec -> function id '(' ty_fields ')' ':' type_id . '=' expr    (rule 53)

	'='            shift, and enter state 136


State 136

	dec -> function id '(' ty_fields ')' ':' type_id '=' . expr    (rule 53)

	while          shift, and enter state 5
	for            shift, and enter state 6
	break          shift, and enter state 7
	let            shift, and enter state 8
	if             shift, and enter state 9
	nil            shift, and enter state 10
	'('            shift, and enter state 11
	'-'            shift, and enter state 12
	string         shift, and enter state 13
	int            shift, and enter state 14
	id             shift, and enter state 15

	expr           goto state 137
	lvalue         goto state 3
	lvalue_        goto state 4

State 137

	expr -> expr . '+' expr                             (rule 12)
	expr -> expr . '-' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr . '/' expr                             (rule 15)
	expr -> expr . '=' expr                             (rule 16)
	expr -> expr . '<>' expr                            (rule 17)
	expr -> expr . '<' expr                             (rule 18)
	expr -> expr . '<=' expr                            (rule 19)
	expr -> expr . '>' expr                             (rule 20)
	expr -> expr . '>=' expr                            (rule 21)
	expr -> expr . '&' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	dec -> function id '(' ty_fields ')' ':' type_id '=' expr .    (rule 53)

	in             reduce using rule 53
	function       reduce using rule 53
	var            reduce using rule 53
	type           reduce using rule 53
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	'='            shift, and enter state 36
	'<>'           shift, and enter state 37
	'<'            shift, and enter state 38
	'<='           shift, and enter state 39
	'>'            shift, and enter state 40
	'>='           shift, and enter state 41
	'&'            shift, and enter state 42
	'|'            shift, and enter state 43


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 63
Number of terminals: 43
Number of non-terminals: 16
Number of states: 138
